from fastapi import APIRouter, HTTPException
from app.api.v1.models import PromptRequest, PromptResponse, GeminiErrorResponse
from app.core.config import settings, GEMINI_MODEL
from app.core.logging import setup_logger
import google.generativeai as genai

router = APIRouter()
logger = setup_logger("gemini")

@router.post("/generate", response_model=PromptResponse, responses={
    500: {"model": GeminiErrorResponse}
})
async def generate_response(request: PromptRequest) -> PromptResponse:
    """
    Generate Python code and pytest test cases from pseudocode using Google's Gemini model.

    The endpoint accepts pseudocode as input and returns both the Python implementation
    and corresponding pytest test cases.

    Args:
        request (PromptRequest): Request body containing:
            - prompt (str): The pseudocode to convert
            - max_retries (int, optional): Maximum number of retries for JSON parsing (1-5, default: 3)

    Returns:
        PromptResponse: Response containing:
            - code (str): The generated Python implementation
            - testing_code (str): The generated pytest test cases
            - model_used (str): The Gemini model version used

    Raises:
        HTTPException (500): 
            - When no response is generated by the model
            - When the model response is not valid JSON after max_retries attempts
            - For any other unexpected errors
    """
    max_retries = request.max_retries
    retry_count = 0

    while retry_count < max_retries:
        try:
            # Ensure API is configured
            genai.configure(api_key=settings.GOOGLE_API_KEY, transport="rest")
            
            # Use preset generation config
            generation_config = {
                "temperature": 0.0,     
                "top_p": 1.0,       
                "top_k": 0,     
                "candidate_count": 1,
                "max_output_tokens": 10000
            }
            
            # First call: Generate Python code
            code_prompt = f"""
            Convert the following pseudocode into Python code EXACTLY as specified. 
            Do not fix, re-arrange, or optimize anything. 
            If the pseudocode is contradictory or syntactically incorrect, replicate that as closely as possible in Python. 
            The goal is a near-verbatim translation from pseudocode into Python. 
            If any step in the pseudocode is ambiguous, maintain the same structure and variable usage. 
            Do not add error handling or assume missing details. 
            Return ONLY the Python code.

            Question Description:
            {request.description}

            Pseudocode:
            {request.prompt}
            """
            
            code_response = GEMINI_MODEL.generate_content(
                contents=[{"text": code_prompt}],
                generation_config=generation_config
            )
            
            if not code_response.text:
                raise HTTPException(status_code=500, detail="No code generated")
            
            python_code = code_response.text.strip()
            python_code = python_code.replace("```python", "").replace("```", "").strip()
            
            # Second call: Generate test cases
            test_prompt = f"""
            Write pytest test cases for this Python code. The test cases should reflect the code's behavior as-is, including any logical errors or flaws.
            Return ONLY the pytest test cases, no explanations or additional text.

            Python Code:
            {python_code}
            """
            
            test_response = GEMINI_MODEL.generate_content(
                contents=[{"text": test_prompt}],
                generation_config=generation_config
            )
            
            if not test_response.text:
                raise HTTPException(status_code=500, detail="No test cases generated")
            
            testing_code = test_response.text.strip()
            testing_code = testing_code.replace("```python", "").replace("```", "").strip()
            
            # Return the combined response
            return PromptResponse(
                code=python_code,
                testing_code=testing_code,
                model_used=settings.GEMINI_MODEL_NAME
            )
        except Exception as e:
            logger.error(f"Error in generate_response: {str(e)}")
            raise HTTPException(
                status_code=500,
                detail=GeminiErrorResponse(
                    error="Unexpected error in generate_response",
                    details=str(e),
                    retries_attempted=retry_count
                ).model_dump()
            )