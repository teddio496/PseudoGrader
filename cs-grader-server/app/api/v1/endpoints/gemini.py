from fastapi import APIRouter, HTTPException
from app.api.v1.models import PromptRequest, PromptResponse
from app.core.config import GEMINI_MODEL, GOOGLE_API_KEY
from app.core.logging import setup_logger
import google.generativeai as genai

router = APIRouter()
logger = setup_logger("gemini")

@router.post("/generate", response_model=PromptResponse)
async def generate_response(request: PromptRequest) -> PromptResponse:
    """
    Generate Python code and pytest test cases from pseudocode using Google's Gemini model.

    The endpoint accepts pseudocode as input and returns both the Python implementation
    and corresponding pytest test cases.

    Args:
        request (PromptRequest): Request body containing:
            - prompt (str): The pseudocode to convert

    Returns:
        PromptResponse: Response containing:
            - code (str): The generated Python implementation
            - testing_code (str): The generated pytest test cases
            - model_used (str): The Gemini model version used

    Raises:
        HTTPException (500): 
            - When no response is generated by the model
            - When the model response is not valid JSON
            - For any other unexpected errors
    """
    try:
        # Ensure API is configured
        genai.configure(api_key=GOOGLE_API_KEY, transport="rest")
        
        # Use preset generation config
        generation_config = {
            "temperature": 0.7,
            "top_p": 0.8,
            "top_k": 40,
            "candidate_count": 1,
            "max_output_tokens": 2048
        }
        
        # Construct prompt with instructions
        prompt = f"""Convert this pseudocode to Python code and generate test cases using pytest. Format the response as JSON with two fields:
        - "code": containing just the Python implementation
        - "testing_code": containing the pytest test cases
        
        Return only valid JSON with these two fields, no other text or formatting.

Pseudocode:
{request.prompt}"""
            
        # Generate response
        response = GEMINI_MODEL.generate_content(
            contents=[{"text": prompt}],
            generation_config=generation_config
        )
        
        if not response.text:
            raise HTTPException(status_code=500, detail="No response generated")
        
        # Extract just the Python code from the response
        # Remove any test cases or other text
        python_code = response.text.strip()
        try:
            import json
            # Strip JSON code block markers if present
            response_text = response.text.strip()
            if response_text.startswith("```json"):
                response_text = response_text[7:]
            if response_text.endswith("```"):
                response_text = response_text[:-3]
            response_text = response_text.strip()
            response_json = json.loads(response_text)
            python_code = response_json["code"]
            testing_code = response_json["testing_code"]
        except:
            logger.error(f"Invalid JSON response from model: {response.text.strip()}")
            raise HTTPException(status_code=500, detail="Invalid JSON response from model")
    
        return PromptResponse(
            code=python_code,
            testing_code=testing_code,
            model_used="models/gemini-2.0-pro-exp"
        )
    except Exception as e:
        print(f"Error in generate_response: {str(e)}")  # Debug logging
        raise HTTPException(status_code=500, detail=str(e))